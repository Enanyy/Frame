// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "action.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMAction_ReleaseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAction_ReleaseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAction_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAction_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAction_MoveToPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAction_MoveToPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GMActionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_action_2etxt() {
  protobuf_AddDesc_action_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "action.txt");
  GOOGLE_CHECK(file != NULL);
  GMAction_ReleaseSkill_descriptor_ = file->message_type(0);
  static const int GMAction_ReleaseSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_ReleaseSkill, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_ReleaseSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_ReleaseSkill, mouseposition_),
  };
  GMAction_ReleaseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAction_ReleaseSkill_descriptor_,
      GMAction_ReleaseSkill::default_instance_,
      GMAction_ReleaseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_ReleaseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_ReleaseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAction_ReleaseSkill));
  GMAction_Move_descriptor_ = file->message_type(1);
  static const int GMAction_Move_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_Move, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_Move, draging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_Move, direction_),
  };
  GMAction_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAction_Move_descriptor_,
      GMAction_Move::default_instance_,
      GMAction_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAction_Move));
  GMAction_MoveToPoint_descriptor_ = file->message_type(2);
  static const int GMAction_MoveToPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_MoveToPoint, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_MoveToPoint, position_),
  };
  GMAction_MoveToPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAction_MoveToPoint_descriptor_,
      GMAction_MoveToPoint::default_instance_,
      GMAction_MoveToPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_MoveToPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAction_MoveToPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAction_MoveToPoint));
  GMActionType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_action_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAction_ReleaseSkill_descriptor_, &GMAction_ReleaseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAction_Move_descriptor_, &GMAction_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAction_MoveToPoint_descriptor_, &GMAction_MoveToPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_action_2etxt() {
  delete GMAction_ReleaseSkill::default_instance_;
  delete GMAction_ReleaseSkill_reflection_;
  delete GMAction_Move::default_instance_;
  delete GMAction_Move_reflection_;
  delete GMAction_MoveToPoint::default_instance_;
  delete GMAction_MoveToPoint_reflection_;
}

void protobuf_AddDesc_action_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_scene_2etxt();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\naction.txt\032\tscene.txt\"[\n\025GMAction_Rele"
    "aseSkill\022\016\n\006roleId\030\001 \002(\005\022\017\n\007skillId\030\002 \002("
    "\005\022!\n\rmouseposition\030\003 \002(\0132\n.GMPoint3D\"O\n\r"
    "GMAction_Move\022\016\n\006roleId\030\001 \002(\005\022\017\n\007draging"
    "\030\002 \002(\010\022\035\n\tdirection\030\003 \002(\0132\n.GMPoint3D\"D\n"
    "\024GMAction_MoveToPoint\022\016\n\006roleId\030\001 \002(\005\022\034\n"
    "\010position\030\002 \002(\0132\n.GMPoint3D*>\n\014GMActionT"
    "ype\022\010\n\004MOVE\020\001\022\021\n\rRELEASE_SKILL\020\002\022\021\n\rMOVE"
    "_TO_POINT\020\003", 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "action.txt", &protobuf_RegisterTypes);
  GMAction_ReleaseSkill::default_instance_ = new GMAction_ReleaseSkill();
  GMAction_Move::default_instance_ = new GMAction_Move();
  GMAction_MoveToPoint::default_instance_ = new GMAction_MoveToPoint();
  GMAction_ReleaseSkill::default_instance_->InitAsDefaultInstance();
  GMAction_Move::default_instance_->InitAsDefaultInstance();
  GMAction_MoveToPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_action_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_action_2etxt {
  StaticDescriptorInitializer_action_2etxt() {
    protobuf_AddDesc_action_2etxt();
  }
} static_descriptor_initializer_action_2etxt_;
const ::google::protobuf::EnumDescriptor* GMActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMActionType_descriptor_;
}
bool GMActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GMAction_ReleaseSkill::kRoleIdFieldNumber;
const int GMAction_ReleaseSkill::kSkillIdFieldNumber;
const int GMAction_ReleaseSkill::kMousepositionFieldNumber;
#endif  // !_MSC_VER

GMAction_ReleaseSkill::GMAction_ReleaseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAction_ReleaseSkill::InitAsDefaultInstance() {
  mouseposition_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
}

GMAction_ReleaseSkill::GMAction_ReleaseSkill(const GMAction_ReleaseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAction_ReleaseSkill::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  skillid_ = 0;
  mouseposition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAction_ReleaseSkill::~GMAction_ReleaseSkill() {
  SharedDtor();
}

void GMAction_ReleaseSkill::SharedDtor() {
  if (this != default_instance_) {
    delete mouseposition_;
  }
}

void GMAction_ReleaseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAction_ReleaseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAction_ReleaseSkill_descriptor_;
}

const GMAction_ReleaseSkill& GMAction_ReleaseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_2etxt();
  return *default_instance_;
}

GMAction_ReleaseSkill* GMAction_ReleaseSkill::default_instance_ = NULL;

GMAction_ReleaseSkill* GMAction_ReleaseSkill::New() const {
  return new GMAction_ReleaseSkill;
}

void GMAction_ReleaseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    skillid_ = 0;
    if (has_mouseposition()) {
      if (mouseposition_ != NULL) mouseposition_->::GMPoint3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAction_ReleaseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // required int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mouseposition;
        break;
      }

      // required .GMPoint3D mouseposition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mouseposition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouseposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAction_ReleaseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // required .GMPoint3D mouseposition = 3;
  if (has_mouseposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mouseposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAction_ReleaseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // required .GMPoint3D mouseposition = 3;
  if (has_mouseposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mouseposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAction_ReleaseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required .GMPoint3D mouseposition = 3;
    if (has_mouseposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mouseposition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAction_ReleaseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAction_ReleaseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAction_ReleaseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAction_ReleaseSkill::MergeFrom(const GMAction_ReleaseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_mouseposition()) {
      mutable_mouseposition()->::GMPoint3D::MergeFrom(from.mouseposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAction_ReleaseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAction_ReleaseSkill::CopyFrom(const GMAction_ReleaseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAction_ReleaseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMAction_ReleaseSkill::Swap(GMAction_ReleaseSkill* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(skillid_, other->skillid_);
    std::swap(mouseposition_, other->mouseposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAction_ReleaseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAction_ReleaseSkill_descriptor_;
  metadata.reflection = GMAction_ReleaseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAction_Move::kRoleIdFieldNumber;
const int GMAction_Move::kDragingFieldNumber;
const int GMAction_Move::kDirectionFieldNumber;
#endif  // !_MSC_VER

GMAction_Move::GMAction_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAction_Move::InitAsDefaultInstance() {
  direction_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
}

GMAction_Move::GMAction_Move(const GMAction_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAction_Move::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  draging_ = false;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAction_Move::~GMAction_Move() {
  SharedDtor();
}

void GMAction_Move::SharedDtor() {
  if (this != default_instance_) {
    delete direction_;
  }
}

void GMAction_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAction_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAction_Move_descriptor_;
}

const GMAction_Move& GMAction_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_2etxt();
  return *default_instance_;
}

GMAction_Move* GMAction_Move::default_instance_ = NULL;

GMAction_Move* GMAction_Move::New() const {
  return new GMAction_Move;
}

void GMAction_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    draging_ = false;
    if (has_direction()) {
      if (direction_ != NULL) direction_->::GMPoint3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAction_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_draging;
        break;
      }

      // required bool draging = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draging:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draging_)));
          set_has_draging();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // required .GMPoint3D direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAction_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required bool draging = 2;
  if (has_draging()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->draging(), output);
  }

  // required .GMPoint3D direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAction_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required bool draging = 2;
  if (has_draging()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->draging(), target);
  }

  // required .GMPoint3D direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAction_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required bool draging = 2;
    if (has_draging()) {
      total_size += 1 + 1;
    }

    // required .GMPoint3D direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAction_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAction_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAction_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAction_Move::MergeFrom(const GMAction_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_draging()) {
      set_draging(from.draging());
    }
    if (from.has_direction()) {
      mutable_direction()->::GMPoint3D::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAction_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAction_Move::CopyFrom(const GMAction_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAction_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMAction_Move::Swap(GMAction_Move* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(draging_, other->draging_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAction_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAction_Move_descriptor_;
  metadata.reflection = GMAction_Move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAction_MoveToPoint::kRoleIdFieldNumber;
const int GMAction_MoveToPoint::kPositionFieldNumber;
#endif  // !_MSC_VER

GMAction_MoveToPoint::GMAction_MoveToPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAction_MoveToPoint::InitAsDefaultInstance() {
  position_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
}

GMAction_MoveToPoint::GMAction_MoveToPoint(const GMAction_MoveToPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAction_MoveToPoint::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAction_MoveToPoint::~GMAction_MoveToPoint() {
  SharedDtor();
}

void GMAction_MoveToPoint::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void GMAction_MoveToPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAction_MoveToPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAction_MoveToPoint_descriptor_;
}

const GMAction_MoveToPoint& GMAction_MoveToPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_2etxt();
  return *default_instance_;
}

GMAction_MoveToPoint* GMAction_MoveToPoint::default_instance_ = NULL;

GMAction_MoveToPoint* GMAction_MoveToPoint::New() const {
  return new GMAction_MoveToPoint;
}

void GMAction_MoveToPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::GMPoint3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAction_MoveToPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .GMPoint3D position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAction_MoveToPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required .GMPoint3D position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAction_MoveToPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required .GMPoint3D position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAction_MoveToPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required .GMPoint3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAction_MoveToPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAction_MoveToPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAction_MoveToPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAction_MoveToPoint::MergeFrom(const GMAction_MoveToPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_position()) {
      mutable_position()->::GMPoint3D::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAction_MoveToPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAction_MoveToPoint::CopyFrom(const GMAction_MoveToPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAction_MoveToPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMAction_MoveToPoint::Swap(GMAction_MoveToPoint* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAction_MoveToPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAction_MoveToPoint_descriptor_;
  metadata.reflection = GMAction_MoveToPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif

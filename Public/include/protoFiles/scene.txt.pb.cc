// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scene.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Frame_BC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Frame_BC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPoint2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPoint2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPoint3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPoint3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Position_BC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Position_BC_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_scene_2etxt() {
  protobuf_AddDesc_scene_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scene.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Request_descriptor_ = file->message_type(0);
  static const int GM_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Request, id_),
  };
  GM_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Request_descriptor_,
      GM_Request::default_instance_,
      GM_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Request));
  GMPlayerData_descriptor_ = file->message_type(1);
  static const int GMPlayerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPlayerData, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPlayerData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPlayerData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPlayerData, direction_),
  };
  GMPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPlayerData_descriptor_,
      GMPlayerData::default_instance_,
      GMPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPlayerData));
  GM_Connect_descriptor_ = file->message_type(2);
  static const int GM_Connect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Connect, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Connect, type_),
  };
  GM_Connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Connect_descriptor_,
      GM_Connect::default_instance_,
      GM_Connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Connect));
  GM_Ready_descriptor_ = file->message_type(3);
  static const int GM_Ready_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ready, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ready, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ready, direction_),
  };
  GM_Ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Ready_descriptor_,
      GM_Ready::default_instance_,
      GM_Ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Ready));
  GMFrameData_descriptor_ = file->message_type(4);
  static const int GMFrameData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFrameData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFrameData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFrameData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFrameData, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFrameData, frametime_),
  };
  GMFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFrameData_descriptor_,
      GMFrameData::default_instance_,
      GMFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFrameData));
  GM_Frame_descriptor_ = file->message_type(5);
  static const int GM_Frame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame, framedata_),
  };
  GM_Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Frame_descriptor_,
      GM_Frame::default_instance_,
      GM_Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Frame));
  GM_Frame_BC_descriptor_ = file->message_type(6);
  static const int GM_Frame_BC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame_BC, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame_BC, framedata_),
  };
  GM_Frame_BC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Frame_BC_descriptor_,
      GM_Frame_BC::default_instance_,
      GM_Frame_BC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame_BC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Frame_BC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Frame_BC));
  GM_Begin_descriptor_ = file->message_type(7);
  static const int GM_Begin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Begin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Begin, playerdata_),
  };
  GM_Begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Begin_descriptor_,
      GM_Begin::default_instance_,
      GM_Begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Begin));
  GMPoint2D_descriptor_ = file->message_type(8);
  static const int GMPoint2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint2D, y_),
  };
  GMPoint2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPoint2D_descriptor_,
      GMPoint2D::default_instance_,
      GMPoint2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPoint2D));
  GMPoint3D_descriptor_ = file->message_type(9);
  static const int GMPoint3D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint3D, z_),
  };
  GMPoint3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPoint3D_descriptor_,
      GMPoint3D::default_instance_,
      GMPoint3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPoint3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPoint3D));
  GM_Position_BC_descriptor_ = file->message_type(10);
  static const int GM_Position_BC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Position_BC, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Position_BC, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Position_BC, direction_),
  };
  GM_Position_BC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Position_BC_descriptor_,
      GM_Position_BC::default_instance_,
      GM_Position_BC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Position_BC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Position_BC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Position_BC));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scene_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Request_descriptor_, &GM_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPlayerData_descriptor_, &GMPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Connect_descriptor_, &GM_Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Ready_descriptor_, &GM_Ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFrameData_descriptor_, &GMFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Frame_descriptor_, &GM_Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Frame_BC_descriptor_, &GM_Frame_BC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Begin_descriptor_, &GM_Begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPoint2D_descriptor_, &GMPoint2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPoint3D_descriptor_, &GMPoint3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Position_BC_descriptor_, &GM_Position_BC::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scene_2etxt() {
  delete GM_Request::default_instance_;
  delete GM_Request_reflection_;
  delete GMPlayerData::default_instance_;
  delete GMPlayerData_reflection_;
  delete GM_Connect::default_instance_;
  delete GM_Connect_reflection_;
  delete GM_Ready::default_instance_;
  delete GM_Ready_reflection_;
  delete GMFrameData::default_instance_;
  delete GMFrameData_reflection_;
  delete GM_Frame::default_instance_;
  delete GM_Frame_reflection_;
  delete GM_Frame_BC::default_instance_;
  delete GM_Frame_BC_reflection_;
  delete GM_Begin::default_instance_;
  delete GM_Begin_reflection_;
  delete GMPoint2D::default_instance_;
  delete GMPoint2D_reflection_;
  delete GMPoint3D::default_instance_;
  delete GMPoint3D_reflection_;
  delete GM_Position_BC::default_instance_;
  delete GM_Position_BC_reflection_;
}

void protobuf_AddDesc_scene_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tscene.txt\"\030\n\nGM_Request\022\n\n\002id\030\001 \002(\003\"i\n"
    "\014GMPlayerData\022\016\n\006roleId\030\001 \002(\005\022\014\n\004name\030\002 "
    "\001(\t\022\034\n\010position\030\003 \002(\0132\n.GMPoint3D\022\035\n\tdir"
    "ection\030\004 \002(\0132\n.GMPoint3D\"*\n\nGM_Connect\022\016"
    "\n\006roleId\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\"W\n\010GM_Ready"
    "\022\016\n\006roleId\030\001 \002(\005\022\034\n\010position\030\002 \002(\0132\n.GMP"
    "oint3D\022\035\n\tdirection\030\003 \002(\0132\n.GMPoint3D\"W\n"
    "\013GMFrameData\022\n\n\002id\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\014"
    "\n\004data\030\003 \002(\014\022\r\n\005frame\030\004 \002(\003\022\021\n\tframetime"
    "\030\005 \002(\003\"J\n\010GM_Frame\022\016\n\006roleId\030\001 \002(\005\022\r\n\005fr"
    "ame\030\002 \002(\003\022\037\n\tframeData\030\004 \003(\0132\014.GMFrameDa"
    "ta\"=\n\013GM_Frame_BC\022\r\n\005frame\030\001 \002(\003\022\037\n\tfram"
    "eData\030\002 \003(\0132\014.GMFrameData\"=\n\010GM_Begin\022\016\n"
    "\006result\030\001 \002(\005\022!\n\nplayerData\030\002 \003(\0132\r.GMPl"
    "ayerData\"!\n\tGMPoint2D\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 "
    "\001(\005\",\n\tGMPoint3D\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t"
    "\n\001z\030\003 \001(\005\"]\n\016GM_Position_BC\022\016\n\006roleId\030\001 "
    "\002(\005\022\034\n\010position\030\002 \001(\0132\n.GMPoint3D\022\035\n\tdir"
    "ection\030\003 \001(\0132\n.GMPoint3D", 744);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scene.txt", &protobuf_RegisterTypes);
  GM_Request::default_instance_ = new GM_Request();
  GMPlayerData::default_instance_ = new GMPlayerData();
  GM_Connect::default_instance_ = new GM_Connect();
  GM_Ready::default_instance_ = new GM_Ready();
  GMFrameData::default_instance_ = new GMFrameData();
  GM_Frame::default_instance_ = new GM_Frame();
  GM_Frame_BC::default_instance_ = new GM_Frame_BC();
  GM_Begin::default_instance_ = new GM_Begin();
  GMPoint2D::default_instance_ = new GMPoint2D();
  GMPoint3D::default_instance_ = new GMPoint3D();
  GM_Position_BC::default_instance_ = new GM_Position_BC();
  GM_Request::default_instance_->InitAsDefaultInstance();
  GMPlayerData::default_instance_->InitAsDefaultInstance();
  GM_Connect::default_instance_->InitAsDefaultInstance();
  GM_Ready::default_instance_->InitAsDefaultInstance();
  GMFrameData::default_instance_->InitAsDefaultInstance();
  GM_Frame::default_instance_->InitAsDefaultInstance();
  GM_Frame_BC::default_instance_->InitAsDefaultInstance();
  GM_Begin::default_instance_->InitAsDefaultInstance();
  GMPoint2D::default_instance_->InitAsDefaultInstance();
  GMPoint3D::default_instance_->InitAsDefaultInstance();
  GM_Position_BC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scene_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scene_2etxt {
  StaticDescriptorInitializer_scene_2etxt() {
    protobuf_AddDesc_scene_2etxt();
  }
} static_descriptor_initializer_scene_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Request::kIdFieldNumber;
#endif  // !_MSC_VER

GM_Request::GM_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Request::InitAsDefaultInstance() {
}

GM_Request::GM_Request(const GM_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Request::~GM_Request() {
  SharedDtor();
}

void GM_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Request_descriptor_;
}

const GM_Request& GM_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GM_Request* GM_Request::default_instance_ = NULL;

GM_Request* GM_Request::New() const {
  return new GM_Request;
}

void GM_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Request::MergeFrom(const GM_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Request::CopyFrom(const GM_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Request::Swap(GM_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Request_descriptor_;
  metadata.reflection = GM_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPlayerData::kRoleIdFieldNumber;
const int GMPlayerData::kNameFieldNumber;
const int GMPlayerData::kPositionFieldNumber;
const int GMPlayerData::kDirectionFieldNumber;
#endif  // !_MSC_VER

GMPlayerData::GMPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPlayerData::InitAsDefaultInstance() {
  position_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
  direction_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
}

GMPlayerData::GMPlayerData(const GMPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPlayerData::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPlayerData::~GMPlayerData() {
  SharedDtor();
}

void GMPlayerData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete direction_;
  }
}

void GMPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPlayerData_descriptor_;
}

const GMPlayerData& GMPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GMPlayerData* GMPlayerData::default_instance_ = NULL;

GMPlayerData* GMPlayerData::New() const {
  return new GMPlayerData;
}

void GMPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::GMPoint3D::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::GMPoint3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .GMPoint3D position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direction;
        break;
      }

      // required .GMPoint3D direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required .GMPoint3D position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required .GMPoint3D direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .GMPoint3D position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required .GMPoint3D direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .GMPoint3D position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .GMPoint3D direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPlayerData::MergeFrom(const GMPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::GMPoint3D::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::GMPoint3D::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPlayerData::CopyFrom(const GMPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void GMPlayerData::Swap(GMPlayerData* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPlayerData_descriptor_;
  metadata.reflection = GMPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Connect::kRoleIdFieldNumber;
const int GM_Connect::kTypeFieldNumber;
#endif  // !_MSC_VER

GM_Connect::GM_Connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Connect::InitAsDefaultInstance() {
}

GM_Connect::GM_Connect(const GM_Connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Connect::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Connect::~GM_Connect() {
  SharedDtor();
}

void GM_Connect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Connect_descriptor_;
}

const GM_Connect& GM_Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GM_Connect* GM_Connect::default_instance_ = NULL;

GM_Connect* GM_Connect::New() const {
  return new GM_Connect;
}

void GM_Connect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Connect::MergeFrom(const GM_Connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Connect::CopyFrom(const GM_Connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Connect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Connect::Swap(GM_Connect* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Connect_descriptor_;
  metadata.reflection = GM_Connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Ready::kRoleIdFieldNumber;
const int GM_Ready::kPositionFieldNumber;
const int GM_Ready::kDirectionFieldNumber;
#endif  // !_MSC_VER

GM_Ready::GM_Ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Ready::InitAsDefaultInstance() {
  position_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
  direction_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
}

GM_Ready::GM_Ready(const GM_Ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Ready::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  position_ = NULL;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Ready::~GM_Ready() {
  SharedDtor();
}

void GM_Ready::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete direction_;
  }
}

void GM_Ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Ready_descriptor_;
}

const GM_Ready& GM_Ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GM_Ready* GM_Ready::default_instance_ = NULL;

GM_Ready* GM_Ready::New() const {
  return new GM_Ready;
}

void GM_Ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::GMPoint3D::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::GMPoint3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .GMPoint3D position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // required .GMPoint3D direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required .GMPoint3D position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required .GMPoint3D direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required .GMPoint3D position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required .GMPoint3D direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required .GMPoint3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .GMPoint3D direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Ready::MergeFrom(const GM_Ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_position()) {
      mutable_position()->::GMPoint3D::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::GMPoint3D::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Ready::CopyFrom(const GM_Ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Ready::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Ready::Swap(GM_Ready* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Ready_descriptor_;
  metadata.reflection = GM_Ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMFrameData::kIdFieldNumber;
const int GMFrameData::kTypeFieldNumber;
const int GMFrameData::kDataFieldNumber;
const int GMFrameData::kFrameFieldNumber;
const int GMFrameData::kFrametimeFieldNumber;
#endif  // !_MSC_VER

GMFrameData::GMFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFrameData::InitAsDefaultInstance() {
}

GMFrameData::GMFrameData(const GMFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFrameData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frame_ = GOOGLE_LONGLONG(0);
  frametime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFrameData::~GMFrameData() {
  SharedDtor();
}

void GMFrameData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GMFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFrameData_descriptor_;
}

const GMFrameData& GMFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GMFrameData* GMFrameData::default_instance_ = NULL;

GMFrameData* GMFrameData::New() const {
  return new GMFrameData;
}

void GMFrameData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    frame_ = GOOGLE_LONGLONG(0);
    frametime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frame;
        break;
      }

      // required int64 frame = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frametime;
        break;
      }

      // required int64 frametime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frametime_)));
          set_has_frametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // required int64 frame = 4;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->frame(), output);
  }

  // required int64 frametime = 5;
  if (has_frametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->frametime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required int64 frame = 4;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->frame(), target);
  }

  // required int64 frametime = 5;
  if (has_frametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->frametime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required int64 frame = 4;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frame());
    }

    // required int64 frametime = 5;
    if (has_frametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frametime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFrameData::MergeFrom(const GMFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_frametime()) {
      set_frametime(from.frametime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFrameData::CopyFrom(const GMFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFrameData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GMFrameData::Swap(GMFrameData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(frame_, other->frame_);
    std::swap(frametime_, other->frametime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFrameData_descriptor_;
  metadata.reflection = GMFrameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Frame::kRoleIdFieldNumber;
const int GM_Frame::kFrameFieldNumber;
const int GM_Frame::kFrameDataFieldNumber;
#endif  // !_MSC_VER

GM_Frame::GM_Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Frame::InitAsDefaultInstance() {
}

GM_Frame::GM_Frame(const GM_Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Frame::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  frame_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Frame::~GM_Frame() {
  SharedDtor();
}

void GM_Frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Frame_descriptor_;
}

const GM_Frame& GM_Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GM_Frame* GM_Frame::default_instance_ = NULL;

GM_Frame* GM_Frame::New() const {
  return new GM_Frame;
}

void GM_Frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    frame_ = GOOGLE_LONGLONG(0);
  }
  framedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frame;
        break;
      }

      // required int64 frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_frameData;
        break;
      }

      // repeated .GMFrameData frameData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_framedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_frameData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int64 frame = 2;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->frame(), output);
  }

  // repeated .GMFrameData frameData = 4;
  for (int i = 0; i < this->framedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->framedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int64 frame = 2;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->frame(), target);
  }

  // repeated .GMFrameData frameData = 4;
  for (int i = 0; i < this->framedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->framedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int64 frame = 2;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frame());
    }

  }
  // repeated .GMFrameData frameData = 4;
  total_size += 1 * this->framedata_size();
  for (int i = 0; i < this->framedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->framedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Frame::MergeFrom(const GM_Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  framedata_.MergeFrom(from.framedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Frame::CopyFrom(const GM_Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < framedata_size(); i++) {
    if (!this->framedata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Frame::Swap(GM_Frame* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(frame_, other->frame_);
    framedata_.Swap(&other->framedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Frame_descriptor_;
  metadata.reflection = GM_Frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Frame_BC::kFrameFieldNumber;
const int GM_Frame_BC::kFrameDataFieldNumber;
#endif  // !_MSC_VER

GM_Frame_BC::GM_Frame_BC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Frame_BC::InitAsDefaultInstance() {
}

GM_Frame_BC::GM_Frame_BC(const GM_Frame_BC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Frame_BC::SharedCtor() {
  _cached_size_ = 0;
  frame_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Frame_BC::~GM_Frame_BC() {
  SharedDtor();
}

void GM_Frame_BC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Frame_BC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Frame_BC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Frame_BC_descriptor_;
}

const GM_Frame_BC& GM_Frame_BC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GM_Frame_BC* GM_Frame_BC::default_instance_ = NULL;

GM_Frame_BC* GM_Frame_BC::New() const {
  return new GM_Frame_BC;
}

void GM_Frame_BC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frame_ = GOOGLE_LONGLONG(0);
  }
  framedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Frame_BC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frameData;
        break;
      }

      // repeated .GMFrameData frameData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_framedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frameData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Frame_BC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frame(), output);
  }

  // repeated .GMFrameData frameData = 2;
  for (int i = 0; i < this->framedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Frame_BC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 frame = 1;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frame(), target);
  }

  // repeated .GMFrameData frameData = 2;
  for (int i = 0; i < this->framedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Frame_BC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 frame = 1;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frame());
    }

  }
  // repeated .GMFrameData frameData = 2;
  total_size += 1 * this->framedata_size();
  for (int i = 0; i < this->framedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->framedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Frame_BC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Frame_BC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Frame_BC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Frame_BC::MergeFrom(const GM_Frame_BC& from) {
  GOOGLE_CHECK_NE(&from, this);
  framedata_.MergeFrom(from.framedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame()) {
      set_frame(from.frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Frame_BC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Frame_BC::CopyFrom(const GM_Frame_BC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Frame_BC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < framedata_size(); i++) {
    if (!this->framedata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Frame_BC::Swap(GM_Frame_BC* other) {
  if (other != this) {
    std::swap(frame_, other->frame_);
    framedata_.Swap(&other->framedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Frame_BC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Frame_BC_descriptor_;
  metadata.reflection = GM_Frame_BC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Begin::kResultFieldNumber;
const int GM_Begin::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

GM_Begin::GM_Begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Begin::InitAsDefaultInstance() {
}

GM_Begin::GM_Begin(const GM_Begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Begin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Begin::~GM_Begin() {
  SharedDtor();
}

void GM_Begin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Begin_descriptor_;
}

const GM_Begin& GM_Begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GM_Begin* GM_Begin::default_instance_ = NULL;

GM_Begin* GM_Begin::New() const {
  return new GM_Begin;
}

void GM_Begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  playerdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerData;
        break;
      }

      // repeated .GMPlayerData playerData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GMPlayerData playerData = 2;
  for (int i = 0; i < this->playerdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GMPlayerData playerData = 2;
  for (int i = 0; i < this->playerdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Begin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GMPlayerData playerData = 2;
  total_size += 1 * this->playerdata_size();
  for (int i = 0; i < this->playerdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Begin::MergeFrom(const GM_Begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerdata_.MergeFrom(from.playerdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Begin::CopyFrom(const GM_Begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Begin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerdata_size(); i++) {
    if (!this->playerdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Begin::Swap(GM_Begin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    playerdata_.Swap(&other->playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Begin_descriptor_;
  metadata.reflection = GM_Begin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPoint2D::kXFieldNumber;
const int GMPoint2D::kYFieldNumber;
#endif  // !_MSC_VER

GMPoint2D::GMPoint2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPoint2D::InitAsDefaultInstance() {
}

GMPoint2D::GMPoint2D(const GMPoint2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPoint2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPoint2D::~GMPoint2D() {
  SharedDtor();
}

void GMPoint2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPoint2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPoint2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPoint2D_descriptor_;
}

const GMPoint2D& GMPoint2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GMPoint2D* GMPoint2D::default_instance_ = NULL;

GMPoint2D* GMPoint2D::New() const {
  return new GMPoint2D;
}

void GMPoint2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPoint2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPoint2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPoint2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPoint2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPoint2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPoint2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPoint2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPoint2D::MergeFrom(const GMPoint2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPoint2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPoint2D::CopyFrom(const GMPoint2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPoint2D::IsInitialized() const {

  return true;
}

void GMPoint2D::Swap(GMPoint2D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPoint2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPoint2D_descriptor_;
  metadata.reflection = GMPoint2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPoint3D::kXFieldNumber;
const int GMPoint3D::kYFieldNumber;
const int GMPoint3D::kZFieldNumber;
#endif  // !_MSC_VER

GMPoint3D::GMPoint3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPoint3D::InitAsDefaultInstance() {
}

GMPoint3D::GMPoint3D(const GMPoint3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPoint3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPoint3D::~GMPoint3D() {
  SharedDtor();
}

void GMPoint3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPoint3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPoint3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPoint3D_descriptor_;
}

const GMPoint3D& GMPoint3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GMPoint3D* GMPoint3D::default_instance_ = NULL;

GMPoint3D* GMPoint3D::New() const {
  return new GMPoint3D;
}

void GMPoint3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPoint3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPoint3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPoint3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPoint3D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPoint3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPoint3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPoint3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPoint3D::MergeFrom(const GMPoint3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPoint3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPoint3D::CopyFrom(const GMPoint3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPoint3D::IsInitialized() const {

  return true;
}

void GMPoint3D::Swap(GMPoint3D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPoint3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPoint3D_descriptor_;
  metadata.reflection = GMPoint3D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Position_BC::kRoleIdFieldNumber;
const int GM_Position_BC::kPositionFieldNumber;
const int GM_Position_BC::kDirectionFieldNumber;
#endif  // !_MSC_VER

GM_Position_BC::GM_Position_BC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Position_BC::InitAsDefaultInstance() {
  position_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
  direction_ = const_cast< ::GMPoint3D*>(&::GMPoint3D::default_instance());
}

GM_Position_BC::GM_Position_BC(const GM_Position_BC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Position_BC::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  position_ = NULL;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Position_BC::~GM_Position_BC() {
  SharedDtor();
}

void GM_Position_BC::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete direction_;
  }
}

void GM_Position_BC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Position_BC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Position_BC_descriptor_;
}

const GM_Position_BC& GM_Position_BC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2etxt();
  return *default_instance_;
}

GM_Position_BC* GM_Position_BC::default_instance_ = NULL;

GM_Position_BC* GM_Position_BC::New() const {
  return new GM_Position_BC;
}

void GM_Position_BC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::GMPoint3D::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::GMPoint3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Position_BC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .GMPoint3D position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // optional .GMPoint3D direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Position_BC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional .GMPoint3D position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // optional .GMPoint3D direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Position_BC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional .GMPoint3D position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // optional .GMPoint3D direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Position_BC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional .GMPoint3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .GMPoint3D direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Position_BC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Position_BC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Position_BC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Position_BC::MergeFrom(const GM_Position_BC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_position()) {
      mutable_position()->::GMPoint3D::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::GMPoint3D::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Position_BC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Position_BC::CopyFrom(const GM_Position_BC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Position_BC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Position_BC::Swap(GM_Position_BC* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Position_BC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Position_BC_descriptor_;
  metadata.reflection = GM_Position_BC_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif

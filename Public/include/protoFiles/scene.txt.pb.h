// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.txt

#ifndef PROTOBUF_scene_2etxt__INCLUDED
#define PROTOBUF_scene_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_scene_2etxt();
void protobuf_AssignDesc_scene_2etxt();
void protobuf_ShutdownFile_scene_2etxt();

class GM_Request;
class GMPlayerData;
class GM_Connect;
class GM_Ready;
class GMFrameData;
class GM_Frame;
class GM_Frame_BC;
class GM_Begin;
class GMPoint2D;
class GMPoint3D;
class GM_Position_BC;

// ===================================================================

class GM_Request : public ::google::protobuf::Message {
 public:
  GM_Request();
  virtual ~GM_Request();

  GM_Request(const GM_Request& from);

  inline GM_Request& operator=(const GM_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Request& default_instance();

  void Swap(GM_Request* other);

  // implements Message ----------------------------------------------

  GM_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Request& from);
  void MergeFrom(const GM_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Request)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GM_Request* default_instance_;
};
// -------------------------------------------------------------------

class GMPlayerData : public ::google::protobuf::Message {
 public:
  GMPlayerData();
  virtual ~GMPlayerData();

  GMPlayerData(const GMPlayerData& from);

  inline GMPlayerData& operator=(const GMPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMPlayerData& default_instance();

  void Swap(GMPlayerData* other);

  // implements Message ----------------------------------------------

  GMPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMPlayerData& from);
  void MergeFrom(const GMPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .GMPoint3D position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::GMPoint3D& position() const;
  inline ::GMPoint3D* mutable_position();
  inline ::GMPoint3D* release_position();
  inline void set_allocated_position(::GMPoint3D* position);

  // required .GMPoint3D direction = 4;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 4;
  inline const ::GMPoint3D& direction() const;
  inline ::GMPoint3D* mutable_direction();
  inline ::GMPoint3D* release_direction();
  inline void set_allocated_direction(::GMPoint3D* direction);

  // @@protoc_insertion_point(class_scope:GMPlayerData)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::GMPoint3D* position_;
  ::GMPoint3D* direction_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GMPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class GM_Connect : public ::google::protobuf::Message {
 public:
  GM_Connect();
  virtual ~GM_Connect();

  GM_Connect(const GM_Connect& from);

  inline GM_Connect& operator=(const GM_Connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Connect& default_instance();

  void Swap(GM_Connect* other);

  // implements Message ----------------------------------------------

  GM_Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Connect& from);
  void MergeFrom(const GM_Connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Connect)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GM_Connect* default_instance_;
};
// -------------------------------------------------------------------

class GM_Ready : public ::google::protobuf::Message {
 public:
  GM_Ready();
  virtual ~GM_Ready();

  GM_Ready(const GM_Ready& from);

  inline GM_Ready& operator=(const GM_Ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Ready& default_instance();

  void Swap(GM_Ready* other);

  // implements Message ----------------------------------------------

  GM_Ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Ready& from);
  void MergeFrom(const GM_Ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required .GMPoint3D position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::GMPoint3D& position() const;
  inline ::GMPoint3D* mutable_position();
  inline ::GMPoint3D* release_position();
  inline void set_allocated_position(::GMPoint3D* position);

  // required .GMPoint3D direction = 3;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 3;
  inline const ::GMPoint3D& direction() const;
  inline ::GMPoint3D* mutable_direction();
  inline ::GMPoint3D* release_direction();
  inline void set_allocated_direction(::GMPoint3D* direction);

  // @@protoc_insertion_point(class_scope:GM_Ready)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GMPoint3D* position_;
  ::GMPoint3D* direction_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GM_Ready* default_instance_;
};
// -------------------------------------------------------------------

class GMFrameData : public ::google::protobuf::Message {
 public:
  GMFrameData();
  virtual ~GMFrameData();

  GMFrameData(const GMFrameData& from);

  inline GMFrameData& operator=(const GMFrameData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMFrameData& default_instance();

  void Swap(GMFrameData* other);

  // implements Message ----------------------------------------------

  GMFrameData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMFrameData& from);
  void MergeFrom(const GMFrameData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required int64 frame = 4;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 4;
  inline ::google::protobuf::int64 frame() const;
  inline void set_frame(::google::protobuf::int64 value);

  // required int64 frametime = 5;
  inline bool has_frametime() const;
  inline void clear_frametime();
  static const int kFrametimeFieldNumber = 5;
  inline ::google::protobuf::int64 frametime() const;
  inline void set_frametime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GMFrameData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_frametime();
  inline void clear_has_frametime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* data_;
  ::google::protobuf::int64 frame_;
  ::google::protobuf::int64 frametime_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GMFrameData* default_instance_;
};
// -------------------------------------------------------------------

class GM_Frame : public ::google::protobuf::Message {
 public:
  GM_Frame();
  virtual ~GM_Frame();

  GM_Frame(const GM_Frame& from);

  inline GM_Frame& operator=(const GM_Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Frame& default_instance();

  void Swap(GM_Frame* other);

  // implements Message ----------------------------------------------

  GM_Frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Frame& from);
  void MergeFrom(const GM_Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int64 frame = 2;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 2;
  inline ::google::protobuf::int64 frame() const;
  inline void set_frame(::google::protobuf::int64 value);

  // repeated .GMFrameData frameData = 4;
  inline int framedata_size() const;
  inline void clear_framedata();
  static const int kFrameDataFieldNumber = 4;
  inline const ::GMFrameData& framedata(int index) const;
  inline ::GMFrameData* mutable_framedata(int index);
  inline ::GMFrameData* add_framedata();
  inline const ::google::protobuf::RepeatedPtrField< ::GMFrameData >&
      framedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMFrameData >*
      mutable_framedata();

  // @@protoc_insertion_point(class_scope:GM_Frame)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_frame();
  inline void clear_has_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 frame_;
  ::google::protobuf::RepeatedPtrField< ::GMFrameData > framedata_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GM_Frame* default_instance_;
};
// -------------------------------------------------------------------

class GM_Frame_BC : public ::google::protobuf::Message {
 public:
  GM_Frame_BC();
  virtual ~GM_Frame_BC();

  GM_Frame_BC(const GM_Frame_BC& from);

  inline GM_Frame_BC& operator=(const GM_Frame_BC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Frame_BC& default_instance();

  void Swap(GM_Frame_BC* other);

  // implements Message ----------------------------------------------

  GM_Frame_BC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Frame_BC& from);
  void MergeFrom(const GM_Frame_BC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 frame = 1;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 1;
  inline ::google::protobuf::int64 frame() const;
  inline void set_frame(::google::protobuf::int64 value);

  // repeated .GMFrameData frameData = 2;
  inline int framedata_size() const;
  inline void clear_framedata();
  static const int kFrameDataFieldNumber = 2;
  inline const ::GMFrameData& framedata(int index) const;
  inline ::GMFrameData* mutable_framedata(int index);
  inline ::GMFrameData* add_framedata();
  inline const ::google::protobuf::RepeatedPtrField< ::GMFrameData >&
      framedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMFrameData >*
      mutable_framedata();

  // @@protoc_insertion_point(class_scope:GM_Frame_BC)
 private:
  inline void set_has_frame();
  inline void clear_has_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 frame_;
  ::google::protobuf::RepeatedPtrField< ::GMFrameData > framedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GM_Frame_BC* default_instance_;
};
// -------------------------------------------------------------------

class GM_Begin : public ::google::protobuf::Message {
 public:
  GM_Begin();
  virtual ~GM_Begin();

  GM_Begin(const GM_Begin& from);

  inline GM_Begin& operator=(const GM_Begin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Begin& default_instance();

  void Swap(GM_Begin* other);

  // implements Message ----------------------------------------------

  GM_Begin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Begin& from);
  void MergeFrom(const GM_Begin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GMPlayerData playerData = 2;
  inline int playerdata_size() const;
  inline void clear_playerdata();
  static const int kPlayerDataFieldNumber = 2;
  inline const ::GMPlayerData& playerdata(int index) const;
  inline ::GMPlayerData* mutable_playerdata(int index);
  inline ::GMPlayerData* add_playerdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GMPlayerData >&
      playerdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMPlayerData >*
      mutable_playerdata();

  // @@protoc_insertion_point(class_scope:GM_Begin)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GMPlayerData > playerdata_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GM_Begin* default_instance_;
};
// -------------------------------------------------------------------

class GMPoint2D : public ::google::protobuf::Message {
 public:
  GMPoint2D();
  virtual ~GMPoint2D();

  GMPoint2D(const GMPoint2D& from);

  inline GMPoint2D& operator=(const GMPoint2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMPoint2D& default_instance();

  void Swap(GMPoint2D* other);

  // implements Message ----------------------------------------------

  GMPoint2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMPoint2D& from);
  void MergeFrom(const GMPoint2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMPoint2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GMPoint2D* default_instance_;
};
// -------------------------------------------------------------------

class GMPoint3D : public ::google::protobuf::Message {
 public:
  GMPoint3D();
  virtual ~GMPoint3D();

  GMPoint3D(const GMPoint3D& from);

  inline GMPoint3D& operator=(const GMPoint3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMPoint3D& default_instance();

  void Swap(GMPoint3D* other);

  // implements Message ----------------------------------------------

  GMPoint3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMPoint3D& from);
  void MergeFrom(const GMPoint3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMPoint3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GMPoint3D* default_instance_;
};
// -------------------------------------------------------------------

class GM_Position_BC : public ::google::protobuf::Message {
 public:
  GM_Position_BC();
  virtual ~GM_Position_BC();

  GM_Position_BC(const GM_Position_BC& from);

  inline GM_Position_BC& operator=(const GM_Position_BC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Position_BC& default_instance();

  void Swap(GM_Position_BC* other);

  // implements Message ----------------------------------------------

  GM_Position_BC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Position_BC& from);
  void MergeFrom(const GM_Position_BC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional .GMPoint3D position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::GMPoint3D& position() const;
  inline ::GMPoint3D* mutable_position();
  inline ::GMPoint3D* release_position();
  inline void set_allocated_position(::GMPoint3D* position);

  // optional .GMPoint3D direction = 3;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 3;
  inline const ::GMPoint3D& direction() const;
  inline ::GMPoint3D* mutable_direction();
  inline ::GMPoint3D* release_direction();
  inline void set_allocated_direction(::GMPoint3D* direction);

  // @@protoc_insertion_point(class_scope:GM_Position_BC)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GMPoint3D* position_;
  ::GMPoint3D* direction_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2etxt();
  friend void protobuf_AssignDesc_scene_2etxt();
  friend void protobuf_ShutdownFile_scene_2etxt();

  void InitAsDefaultInstance();
  static GM_Position_BC* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_Request

// required int64 id = 1;
inline bool GM_Request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Request::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 GM_Request::id() const {
  return id_;
}
inline void GM_Request::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GMPlayerData

// required int32 roleId = 1;
inline bool GMPlayerData::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMPlayerData::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMPlayerData::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMPlayerData::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GMPlayerData::roleid() const {
  return roleid_;
}
inline void GMPlayerData::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool GMPlayerData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMPlayerData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMPlayerData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMPlayerData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GMPlayerData::name() const {
  return *name_;
}
inline void GMPlayerData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GMPlayerData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GMPlayerData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMPlayerData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GMPlayerData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMPlayerData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .GMPoint3D position = 3;
inline bool GMPlayerData::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMPlayerData::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMPlayerData::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMPlayerData::clear_position() {
  if (position_ != NULL) position_->::GMPoint3D::Clear();
  clear_has_position();
}
inline const ::GMPoint3D& GMPlayerData::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::GMPoint3D* GMPlayerData::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::GMPoint3D;
  return position_;
}
inline ::GMPoint3D* GMPlayerData::release_position() {
  clear_has_position();
  ::GMPoint3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void GMPlayerData::set_allocated_position(::GMPoint3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required .GMPoint3D direction = 4;
inline bool GMPlayerData::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMPlayerData::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMPlayerData::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMPlayerData::clear_direction() {
  if (direction_ != NULL) direction_->::GMPoint3D::Clear();
  clear_has_direction();
}
inline const ::GMPoint3D& GMPlayerData::direction() const {
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::GMPoint3D* GMPlayerData::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::GMPoint3D;
  return direction_;
}
inline ::GMPoint3D* GMPlayerData::release_direction() {
  clear_has_direction();
  ::GMPoint3D* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void GMPlayerData::set_allocated_direction(::GMPoint3D* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
}

// -------------------------------------------------------------------

// GM_Connect

// required int32 roleId = 1;
inline bool GM_Connect::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Connect::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Connect::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Connect::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_Connect::roleid() const {
  return roleid_;
}
inline void GM_Connect::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 type = 2;
inline bool GM_Connect::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Connect::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Connect::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Connect::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GM_Connect::type() const {
  return type_;
}
inline void GM_Connect::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GM_Ready

// required int32 roleId = 1;
inline bool GM_Ready::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Ready::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Ready::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Ready::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_Ready::roleid() const {
  return roleid_;
}
inline void GM_Ready::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required .GMPoint3D position = 2;
inline bool GM_Ready::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Ready::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Ready::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Ready::clear_position() {
  if (position_ != NULL) position_->::GMPoint3D::Clear();
  clear_has_position();
}
inline const ::GMPoint3D& GM_Ready::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::GMPoint3D* GM_Ready::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::GMPoint3D;
  return position_;
}
inline ::GMPoint3D* GM_Ready::release_position() {
  clear_has_position();
  ::GMPoint3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void GM_Ready::set_allocated_position(::GMPoint3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required .GMPoint3D direction = 3;
inline bool GM_Ready::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Ready::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Ready::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Ready::clear_direction() {
  if (direction_ != NULL) direction_->::GMPoint3D::Clear();
  clear_has_direction();
}
inline const ::GMPoint3D& GM_Ready::direction() const {
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::GMPoint3D* GM_Ready::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::GMPoint3D;
  return direction_;
}
inline ::GMPoint3D* GM_Ready::release_direction() {
  clear_has_direction();
  ::GMPoint3D* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void GM_Ready::set_allocated_direction(::GMPoint3D* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
}

// -------------------------------------------------------------------

// GMFrameData

// required int64 id = 1;
inline bool GMFrameData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMFrameData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMFrameData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMFrameData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 GMFrameData::id() const {
  return id_;
}
inline void GMFrameData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool GMFrameData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMFrameData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMFrameData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMFrameData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GMFrameData::type() const {
  return type_;
}
inline void GMFrameData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required bytes data = 3;
inline bool GMFrameData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMFrameData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMFrameData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMFrameData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& GMFrameData::data() const {
  return *data_;
}
inline void GMFrameData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GMFrameData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GMFrameData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMFrameData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* GMFrameData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMFrameData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 frame = 4;
inline bool GMFrameData::has_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMFrameData::set_has_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMFrameData::clear_has_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMFrameData::clear_frame() {
  frame_ = GOOGLE_LONGLONG(0);
  clear_has_frame();
}
inline ::google::protobuf::int64 GMFrameData::frame() const {
  return frame_;
}
inline void GMFrameData::set_frame(::google::protobuf::int64 value) {
  set_has_frame();
  frame_ = value;
}

// required int64 frametime = 5;
inline bool GMFrameData::has_frametime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMFrameData::set_has_frametime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMFrameData::clear_has_frametime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMFrameData::clear_frametime() {
  frametime_ = GOOGLE_LONGLONG(0);
  clear_has_frametime();
}
inline ::google::protobuf::int64 GMFrameData::frametime() const {
  return frametime_;
}
inline void GMFrameData::set_frametime(::google::protobuf::int64 value) {
  set_has_frametime();
  frametime_ = value;
}

// -------------------------------------------------------------------

// GM_Frame

// required int32 roleId = 1;
inline bool GM_Frame::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Frame::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Frame::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Frame::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_Frame::roleid() const {
  return roleid_;
}
inline void GM_Frame::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int64 frame = 2;
inline bool GM_Frame::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Frame::set_has_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Frame::clear_has_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Frame::clear_frame() {
  frame_ = GOOGLE_LONGLONG(0);
  clear_has_frame();
}
inline ::google::protobuf::int64 GM_Frame::frame() const {
  return frame_;
}
inline void GM_Frame::set_frame(::google::protobuf::int64 value) {
  set_has_frame();
  frame_ = value;
}

// repeated .GMFrameData frameData = 4;
inline int GM_Frame::framedata_size() const {
  return framedata_.size();
}
inline void GM_Frame::clear_framedata() {
  framedata_.Clear();
}
inline const ::GMFrameData& GM_Frame::framedata(int index) const {
  return framedata_.Get(index);
}
inline ::GMFrameData* GM_Frame::mutable_framedata(int index) {
  return framedata_.Mutable(index);
}
inline ::GMFrameData* GM_Frame::add_framedata() {
  return framedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMFrameData >&
GM_Frame::framedata() const {
  return framedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMFrameData >*
GM_Frame::mutable_framedata() {
  return &framedata_;
}

// -------------------------------------------------------------------

// GM_Frame_BC

// required int64 frame = 1;
inline bool GM_Frame_BC::has_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Frame_BC::set_has_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Frame_BC::clear_has_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Frame_BC::clear_frame() {
  frame_ = GOOGLE_LONGLONG(0);
  clear_has_frame();
}
inline ::google::protobuf::int64 GM_Frame_BC::frame() const {
  return frame_;
}
inline void GM_Frame_BC::set_frame(::google::protobuf::int64 value) {
  set_has_frame();
  frame_ = value;
}

// repeated .GMFrameData frameData = 2;
inline int GM_Frame_BC::framedata_size() const {
  return framedata_.size();
}
inline void GM_Frame_BC::clear_framedata() {
  framedata_.Clear();
}
inline const ::GMFrameData& GM_Frame_BC::framedata(int index) const {
  return framedata_.Get(index);
}
inline ::GMFrameData* GM_Frame_BC::mutable_framedata(int index) {
  return framedata_.Mutable(index);
}
inline ::GMFrameData* GM_Frame_BC::add_framedata() {
  return framedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMFrameData >&
GM_Frame_BC::framedata() const {
  return framedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMFrameData >*
GM_Frame_BC::mutable_framedata() {
  return &framedata_;
}

// -------------------------------------------------------------------

// GM_Begin

// required int32 result = 1;
inline bool GM_Begin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Begin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Begin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Begin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Begin::result() const {
  return result_;
}
inline void GM_Begin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GMPlayerData playerData = 2;
inline int GM_Begin::playerdata_size() const {
  return playerdata_.size();
}
inline void GM_Begin::clear_playerdata() {
  playerdata_.Clear();
}
inline const ::GMPlayerData& GM_Begin::playerdata(int index) const {
  return playerdata_.Get(index);
}
inline ::GMPlayerData* GM_Begin::mutable_playerdata(int index) {
  return playerdata_.Mutable(index);
}
inline ::GMPlayerData* GM_Begin::add_playerdata() {
  return playerdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMPlayerData >&
GM_Begin::playerdata() const {
  return playerdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMPlayerData >*
GM_Begin::mutable_playerdata() {
  return &playerdata_;
}

// -------------------------------------------------------------------

// GMPoint2D

// optional int32 x = 1;
inline bool GMPoint2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMPoint2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMPoint2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMPoint2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 GMPoint2D::x() const {
  return x_;
}
inline void GMPoint2D::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool GMPoint2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMPoint2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMPoint2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMPoint2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 GMPoint2D::y() const {
  return y_;
}
inline void GMPoint2D::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// GMPoint3D

// optional int32 x = 1;
inline bool GMPoint3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMPoint3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMPoint3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMPoint3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 GMPoint3D::x() const {
  return x_;
}
inline void GMPoint3D::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool GMPoint3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMPoint3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMPoint3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMPoint3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 GMPoint3D::y() const {
  return y_;
}
inline void GMPoint3D::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 z = 3;
inline bool GMPoint3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMPoint3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMPoint3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMPoint3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 GMPoint3D::z() const {
  return z_;
}
inline void GMPoint3D::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// GM_Position_BC

// required int32 roleId = 1;
inline bool GM_Position_BC::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Position_BC::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Position_BC::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Position_BC::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_Position_BC::roleid() const {
  return roleid_;
}
inline void GM_Position_BC::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional .GMPoint3D position = 2;
inline bool GM_Position_BC::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Position_BC::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Position_BC::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Position_BC::clear_position() {
  if (position_ != NULL) position_->::GMPoint3D::Clear();
  clear_has_position();
}
inline const ::GMPoint3D& GM_Position_BC::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::GMPoint3D* GM_Position_BC::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::GMPoint3D;
  return position_;
}
inline ::GMPoint3D* GM_Position_BC::release_position() {
  clear_has_position();
  ::GMPoint3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void GM_Position_BC::set_allocated_position(::GMPoint3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// optional .GMPoint3D direction = 3;
inline bool GM_Position_BC::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Position_BC::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Position_BC::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Position_BC::clear_direction() {
  if (direction_ != NULL) direction_->::GMPoint3D::Clear();
  clear_has_direction();
}
inline const ::GMPoint3D& GM_Position_BC::direction() const {
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::GMPoint3D* GM_Position_BC::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::GMPoint3D;
  return direction_;
}
inline ::GMPoint3D* GM_Position_BC::release_direction() {
  clear_has_direction();
  ::GMPoint3D* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void GM_Position_BC::set_allocated_direction(::GMPoint3D* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_scene_2etxt__INCLUDED
